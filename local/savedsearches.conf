[Notable from ES]
action.keyindicator.invert = 0
action.makestreams.param.verbose = 0
action.nbtstat.param.verbose = 0
action.notable.param.verbose = 0
action.nslookup.param.verbose = 0
action.ping.param.verbose = 0
action.risk.forceCsvResults = 1
action.risk.param.verbose = 0
action.send2uba.param.verbose = 0
action.sendtophantom = 1
action.sendtophantom.param._cam_workers = ["local"]
action.sendtophantom.param.label = $result._es_to_phantom_label$
action.sendtophantom.param.phantom_server = Mortens Phantom-server
action.sendtophantom.param.sensitivity = $result._es_to_phantom_sensitivity$
action.sendtophantom.param.severity = $result._es_to_phantom_severity$
action.threat_add.param.verbose = 0
alert.digest_mode = 0
alert.severity = 1
alert.suppress = 0
alert.track = 1
counttype = number of events
cron_schedule = * * * * *
description = Send Notables to Phantom
dispatch.earliest_time = -2m
dispatch.latest_time = -1m
enableSched = 1
quantity = 0
relation = greater than
request.ui_dispatch_app = TA-SE-Phantom_config
request.ui_dispatch_view = search
search = `notable` | search [ |inputlookup soar_cr_names.csv | fields search_name ] | expandtoken ``` This search will look for specified notable names in the soar_cr_names.csv file, expand them and enrich with info in order to send them to Phantom. All fields including event_id will be forwarded over unless they are excluded below. Make sure you schedule this search PER-EVENT (alert.digest_mode = 0), Not Once ```| eval source = search_name  ```Use the search_name field as the title of the Container```| eval _es_to_phantom_severity = severity ```Get the severity from the notable```| eval _es_to_phantom_sensitivity = "green" ```Hard code the sensitivity. Room for improvement here```| spath input=annotations | rename *{} AS * ```Make the annotations JSON separate fields```| eval cis20=mvjoin(cis20,","), kill_chain_phases=mvjoin(kill_chain_phases,","),  mitre_attack=mvjoin(mitre_attack,","), nist=mvjoin(nist,",") ```Make multi-value fields single value```| fields - annotations| lookup soar_cr_names search_name OUTPUT label AS _es_to_phantom_label ```Get the label we want to use from the lookup```| eval _es_to_phantom_label=coalesce(_es_to_phantom_label,"events") ```Make sure we always have a value for our label```
